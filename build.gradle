plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'maven-publish' // for uploading to a maven repo

if (gradle.startParameter.taskNames.contains("checkstyle")) {
    apply plugin: "checkstyle"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    maven { name="Modmuss50"; url="https://maven.modmuss50.me/" }
    maven { name="AlexIIL"; url="https://maven.alexiil.uk/" }
}

archivesBaseName = "libblockatttributes"
version = "0.14.0-pre.1"

license {
    header = project.file('misc/LICENSE_HEADER.txt');
    newLine = false;
}

dependencies {
    minecraft "com.mojang:minecraft:1.20-pre4"
    mappings "net.fabricmc:yarn:1.20-pre4+build.2:v2"
    modImplementation "net.fabricmc:fabric-loader:0.14.19"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.80.2+1.20"

    // Item-inventory
    //modImplementation("com.github.emilyploszaj:item-inventory:v1.1.0") { transitive = false }

    // Misc
    implementation "com.google.code.findbugs:jsr305:3.0.1"
    testImplementation "junit:junit:4.12"
}

test {
    // Yarn for 1.18.2 doesn't work for tests ATM
    // java.lang.IllegalAccessError: class net.minecraft.world.gen.chunk.ChunkGeneratorSettings 
    // tried to access protected method 'net.minecraft.world.gen.noise.SimpleNoiseRouter net.minecraft.world.gen.densityfunction.DensityFunctions.method_41103(net.minecraft.world.gen.chunk.GenerationShapeConfig, boolean)'
    // (net.minecraft.world.gen.chunk.ChunkGeneratorSettings and net.minecraft.world.gen.densityfunction.DensityFunctions are in unnamed module of loader 'app')
    enabled = false
}

sourceSets {
    main {
        java {
            srcDir "src/fatjar/java"
            exclude "alexiil/mc/lib/attributes/item/compat/mod/emi/iteminv/**"
        }
    }
}

task checkstyle {}

if (gradle.startParameter.taskNames.contains("checkstyle")) {
    checkstyle {
        configFile = file("guidelines/lba.checkstyle")
        toolVersion = "8.35"
    }

    tasks["checkstyle"].dependsOn checkstyleMain

    tasks["checkstyleMain"].enabled = true
    tasks["checkstyleTest"].enabled = false
}

processResources {
    inputs.property "version", project.version
    duplicatesStrategy = DuplicatesStrategy.FAIL
    filesMatching('fabric.mod.json', {
        filter({str -> str.replace("$version", project.version)});
    })
}

compileJava {
    options.compilerArgs << "-Xmaxerrs" << "2000"
    options.compilerArgs << "-Xmaxwarns" << "2"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xdiags:verbose"
}

javadoc {
    exclude "alexiil/mc/lib/attributes/mixin";
    exclude "alexiil/mc/lib/attributes/fluid/mixin/impl";
    exclude "alexiil/mc/lib/attributes/fatjar";
    options.group("Items Module", "alexiil.mc.lib.attributes.item*");
    options.group("Fluids Module", "alexiil.mc.lib.attributes.fluid*");
    options.group("Core Module", "alexiil.mc.lib.attributes*");
    destinationDir file(new File(System.getenv("JAVADOC_DIR") ?: "$projectDir/build/javadoc", "$version"));
    options.optionFiles << file('javadoc.options');
}

build.dependsOn(javadoc);

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 17
}

java.withSourcesJar()

new File("run/").mkdirs();

test {
    workingDir = "run/"
}

publishing {
    repositories {
        maven {
            url System.getenv("MAVEN_DIR") ?: "$projectDir/build/maven"
        }
    }
}

// #####################
//
// Extra jar section
//
// #####################

apply from: "extra_jar_def.gradle"

ext.mainName = "libblockattributes"
ext.mavenGroupId = "alexiil.mc.lib";

ext.extra_jar_def__optimised_compression = true;
ext.extra_jar_def__common_manifest.put(null, ['Sealed': 'true']);

// Custom modules
def itemsIncludes = [
    "alexiil/mc/lib/attributes/item/**",
    "assets/libblockattributes/icon_items.png",
    "libblockattributes_item.common.json"
];
def fluidsIncludes = [
    "alexiil/mc/lib/attributes/fluid/**",
    "assets/libblockattributes/lang/**",
    "assets/libblockattributes/textures/fluid/**",
    "assets/libblockattributes/icon_fluids.png",
    "libblockattributes_fluid.common.json",
    "libblockattributes_fluid.client.json"
];
def allIncludes = [
    "assets/libblockattributes/icon_all.png"
];
def coreExclude = new HashSet<>();
coreExclude.addAll(itemsIncludes);
coreExclude.addAll(fluidsIncludes);
coreExclude.add("alexiil/mc/lib/attributes/fatjar/**");

itemsIncludes.add("assets/libblockattributes/icon_all.png")
fluidsIncludes.add("assets/libblockattributes/icon_all.png")

def jsr305 = ["com.google.code.findbugs", "jsr305", "3.0.1"]

generateJar("core", ["**"], coreExclude, true, [], [], [jsr305]);
generateJar("items", itemsIncludes, [], true, ["core"], [], [jsr305]);
generateJar("fluids", fluidsIncludes, [], true, ["core"], [], [jsr305]);
generateJar("all", allIncludes, [], false, [], ["core", "items", "fluids"], [jsr305]);
generateFatJar("fatjar_devonly", ["**"], [], false, [], ["core", "items", "fluids"], [jsr305]);

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
