plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'net.minecrell.licenser' version '0.4.1'
}

apply plugin: 'maven-publish' // for uploading to a maven repo

if (gradle.startParameter.taskNames.contains("checkstyle")) {
    apply plugin: "checkstyle"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { name="Modmuss50"; url="https://maven.modmuss50.me/" }
    maven { name="BuildCraft"; url="https://mod-buildcraft.com/maven/" }
    //maven { name="Jitpack"; url = "https://jitpack.io" }
}

archivesBaseName = "libblockatttributes"
version = "0.8.0-pre.18"

license {
    header = project.file('misc/LICENSE_HEADER.txt');
    newLine = false;
}

minecraft {
}

dependencies {
    minecraft "com.mojang:minecraft:1.16.2"
    mappings "net.fabricmc:yarn:1.16.2+build.19:v2"
    modImplementation "net.fabricmc:fabric-loader:0.9.1+build.205"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.18.0+build.397-1.16"

    // Silk API
    modImplementation("io.github.prospector.silk:SilkAPI:${silk_version}") { transitive = false }

    // RebornCore
    modImplementation("RebornCore:RebornCore-${reborncore_mc_release}:${reborncore_version}") { transitive = false }

    // Item-inventory
    modImplementation("com.github.emilyploszaj:item-inventory:v1.1.0") { transitive = false }

    // Misc
    compile "com.google.code.findbugs:jsr305:3.0.1"
    testCompile "junit:junit:4.12"
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "src/fatjar/java"
        }
    }
}

task checkstyle {}

if (gradle.startParameter.taskNames.contains("checkstyle")) {
    checkstyle {
        configFile = file("guidelines/lba.checkstyle")
        toolVersion = "8.35"
    }

    tasks["checkstyle"].dependsOn checkstyleMain

    tasks["checkstyleMain"].enabled = true
    tasks["checkstyleTest"].enabled = false
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        // We can't use expand because "$version.jar" doesn't expand correctly
        filter({str -> str.replace("$version", project.version)});
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

compileJava {
    options.compilerArgs << "-Xmaxerrs" << "2000"
    options.compilerArgs << "-Xmaxwarns" << "2"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xdiags:verbose"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

new File("run/").mkdirs();

test {
    workingDir = "run/"
}

publishing {
    repositories {
        maven {
            url System.getenv("MAVEN_DIR") ?: "$projectDir/build/maven"
        }
    }
}

// #####################
//
// Extra jar section
//
// #####################

apply from: "extra_jar_def.gradle"

ext.mainName = "libblockattributes"
ext.mavenGroupId = "alexiil.mc.lib";

ext.extra_jar_def__optimised_compression = true;
ext.extra_jar_def__common_manifest.put(null, ['Sealed': 'true']);

// Custom modules
def itemsIncludes = [
    "alexiil/mc/lib/attributes/item/**",
    "assets/libblockattributes/icon_items.png",
    "libblockattributes_item.common.json"
];
def fluidsIncludes = [
    "alexiil/mc/lib/attributes/fluid/**",
    "assets/libblockattributes/lang/**",
    "assets/libblockattributes/textures/fluid/**",
    "assets/libblockattributes/icon_fluids.png",
    "libblockattributes_fluid.common.json",
    "libblockattributes_fluid.client.json"
];
def allIncludes = [
    "assets/libblockattributes/icon_all.png"
];
def coreExclude = new HashSet<>();
coreExclude.addAll(itemsIncludes);
coreExclude.addAll(fluidsIncludes);
coreExclude.add("alexiil/mc/lib/attributes/fatjar/**");

generateJar("core", ["**"], coreExclude, false);
generateJar("items", itemsIncludes, [], true, ["core"]);
generateJar("fluids", fluidsIncludes, [], true, ["core"]);
generateJar("all", allIncludes, [], false, [], ["core", "items", "fluids"]);
generateFatJar("fatjar_devonly", ["**"], [], false, [], ["core", "items", "fluids"]);

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
